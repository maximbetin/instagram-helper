# Instagram Helper - Continuous Integration Pipeline
# This workflow ensures code quality, runs tests, and builds packages automatically

name: CI Pipeline

# Trigger conditions for the workflow
on:
  # Run on pushes to main branch
  push:
    branches: [main]
    paths:
      - "**.py" # Python source files
      - ".github/workflows/**" # Workflow changes
      - "pyproject.toml" # Project configuration changes
  # Run on pull requests to main branch
  pull_request:
    branches: [main]
    paths:
      - "**.py" # Python source files
      - ".github/workflows/**" # Workflow changes
      - "pyproject.toml" # Project configuration changes

# Define the jobs that will run
jobs:
  # CI Job: Quality checks, testing, and validation
  ci:
    runs-on: ubuntu-latest # Use Ubuntu for better Python support
    strategy:
      matrix:
        # Test against multiple Python versions for compatibility
        python-version: ["3.9", "3.10", "3.11", "3.12"]

    steps:
      # Step 1: Check out the source code
      - name: Checkout code
        uses: actions/checkout@v4

      # Step 2: Set up Python environment
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      # Step 3: Install system dependencies
      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y wget

      # Step 4: Install Playwright browsers for testing
      - name: Install Playwright browsers
        run: |
          python -m pip install --upgrade pip
          pip install playwright
          playwright install --with-deps

      # Step 5: Install project dependencies
      - name: Install project dependencies
        run: |
          pip install -e ".[dev]"

      # Step 6: Run code quality checks
      - name: Run linting
        run: |
          ruff check .              # Code style and quality checks
          mypy .                    # Static type checking

      # Step 7: Run tests with coverage
      - name: Run tests
        run: |
          pytest tests/ -v --cov=. --cov-report=xml

      # Step 8: Upload coverage to Codecov
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml # Coverage report file
          fail_ci_if_error: false # Don't fail CI if coverage upload fails

  # Build Job: Package building and verification (only on main branch)
  build:
    needs: ci # Wait for CI job to complete successfully
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      # Step 1: Check out the source code
      - name: Checkout code
        uses: actions/checkout@v4

      # Step 2: Set up Python environment
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12" # Use latest stable Python for building

      # Step 3: Install build tools
      - name: Install build tools
        run: |
          python -m pip install --upgrade pip
          pip install build         # Modern Python build system

      # Step 4: Build package distribution
      - name: Build package
        run: |
          python -m build           # Build wheel and source distribution
          ls -la dist/              # List built files

      # Step 5: Test package installation and functionality
      - name: Test package installation
        run: |
          # Create test virtual environment
          python -m venv test_env
          source test_env/bin/activate

          # Install the built package
          wheel_file=$(ls dist/*.whl | head -1)
          if [ -n "$wheel_file" ]; then
              pip install "$wheel_file"
              
              # Test CLI entry point functionality
              instagram-helper --help
              
              # Test module imports
              python -c "import instagram_scraper; import report_generator; import browser_manager; print('All modules imported successfully')"
          else
              echo "No wheel file found in dist/ directory"
              exit 1
          fi

      # Step 6: Upload build artifacts
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: python-package # Artifact name
          path: dist/ # Path to built packages
          retention-days: 30 # Keep artifacts for 30 days
