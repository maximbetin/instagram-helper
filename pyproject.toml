# This file configures the project, its dependencies, and development tools.

# Build system requirements. Specifies how to build the package.
[build-system]
requires = ["setuptools>=69.0", "wheel"]
build-backend = "setuptools.build_meta"

# Project metadata and basic information.
[project]
name = "instagram-helper"
version = "1.0.0"
description = "A modern GUI-based tool that automatically fetches recent posts from Instagram accounts and generates HTML reports with real-time monitoring"
readme = "README.md"
license = { file = "LICENSE" }
authors = [{name = "Maxim Betin", email = "betinmaxim@gmail.com"}]
keywords = ["instagram", "scraper", "browser", "automation", "reports", "monitoring"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: End Users/Desktop",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: User Interfaces",
    "Topic :: Internet",
]
requires-python = ">=3.12"

# Runtime dependencies. Required for the application to function.
dependencies = [
    "pyinstaller>=6.15.0,<7.0",
    "playwright>=1.54,<2.0",
    "jinja2>=3.1,<4.0",
    "tzdata",
]

# Optional dependency groups.
[project.optional-dependencies]
# Development dependencies. For development, testing, and code quality.
dev = [
    "pytest>=8.4.1",
    "pytest-cov>=6.2.1",
    "ruff>=0.5",
    "mypy>=1.10",
]

# Testing dependencies. For running tests only.
test = [
    "pytest>=8.4.1",
    "pytest-cov>=6.2.1",
]

# GUI entry point. Makes the tool available as a Python module.
[project.scripts]
instagram-helper = "run:main"

# Optional: hide console window for Tkinter on Windows
[project.gui-scripts]
instagram-helper-gui = "run:main"

# Project URLs for documentation and source.
[project.urls]
Homepage = "https://github.com/maximbetin/instagram-helper"
Repository = "https://github.com/maximbetin/instagram-helper"
Issues = "https://github.com/maximbetin/instagram-helper/issues"

# Package discovery and inclusion configuration.
[tool.setuptools]
# Specify Python modules to include (not traditional packages).
packages = []
py-modules = [
    "run",
    "instagram_scraper",
    "utils",
    "gui_app",
    "config",
    "browser_manager",
    "report_generator",
]

# Include non-Python files in the package using data-files for py-modules.
[tool.setuptools.data-files]
"share/instagram_helper/templates" = ["templates/*.html"]

# Pytest configuration for testing.
[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = "-v --tb=short --strict-markers"
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
]

# Coverage configuration for pytest-cov.
[tool.coverage.run]
source = ["run", "instagram_scraper", "utils", "gui_app", "config", "browser_manager", "report_generator"]
omit = [
    "tests/*",
    "venv/*",
    "build/*",
    "__pycache__/*",
    ".pytest_cache/*",
]

# Coverage report configuration.
[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

# Ruff configuration for code formatting and linting.
[tool.ruff]
target-version = "py312"
line-length = 88
extend-exclude = ["venv", "build", ".ruff_cache", ".mypy_cache", ".pytest_cache", "dist"]

# Ruff linting rules.
[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by line-length
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

# Ruff import sorting configuration.
[tool.ruff.lint.isort]
known-first-party = ["run", "instagram_scraper", "utils", "gui_app", "config", "browser_manager", "report_generator"]

# Ruff formatting options.
[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

# MyPy configuration for static type checking.
[tool.mypy]
python_version = "3.12"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
# Exclude directories from type checking.
exclude = [
    "build",
    "venv",
    "__pycache__",
    ".pytest_cache",
    "tests",
]

# MyPy module overrides for external libraries.
[[tool.mypy.overrides]]
module = [
    "playwright.*",
    "jinja2.*",
]
