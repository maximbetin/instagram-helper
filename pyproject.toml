# Instagram Helper - Python Project Configuration
# This file configures the project, its dependencies, and development tools

[build-system]
# Build system requirements - specifies how to build the package
requires = ["setuptools>=68.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
# Project metadata and basic information
name = "instagram-helper"
version = "1.0.0"
description = "A tool that automatically fetches recent posts from Instagram accounts and generates HTML reports"
readme = "README.md"
license = "MIT"
authors = [
    {name = "Maxim"}
]
keywords = ["instagram", "scraper", "browser", "automation", "reports"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: End Users/Desktop",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.12",
    "Topic :: Internet :: WWW/HTTP :: Browsers",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
requires-python = ">=3.12"

# Runtime dependencies - required for the application to function
dependencies = [
    "playwright>=1.40.0",  # Browser automation and web scraping
    "jinja2>=3.1.0",       # HTML template rendering
    "python-dotenv>=1.0.0", # Load .env automatically if present
    "fake-useragent>=1.5.1", # Fake User-Agent generator
]

# Optional dependency groups
[project.optional-dependencies]
# Development dependencies - for development, testing, and code quality
dev = [
    "pytest>=7.4.0",           # Testing framework
    "freezegun>=1.4.0",        # Time-freezing utility used in tests
    "ruff>=0.1.0",             # Code formatting and linting
    "mypy>=1.5.0",             # Static type checking
]

# Testing dependencies - for running tests only
test = [
    "pytest>=7.4.0",
    "freezegun>=1.4.0",
]

# CLI entry points - makes the tool available as a command
[project.scripts]
instagram-helper = "cli:main"

# Project URLs for documentation and source
[project.urls]
Homepage = "https://github.com/maximbetin/instagram-helper"
Repository = "https://github.com/maximbetin/instagram-helper"
Issues = "https://github.com/maximbetin/instagram-helper/issues"

# Package discovery and inclusion configuration
[tool.setuptools]
# Specify Python modules to include (not traditional packages)
packages = []
py-modules = [
    "instagram_scraper",    # Main scraping functionality
    "utils",                # Utility functions and logging
    "cli",                  # Command-line interface
    "config",               # Configuration settings
    "browser_manager",      # Browser management
    "report_generator",     # HTML report generation
]

# Include non-Python files in the package
[tool.setuptools.package-data]
"*" = ["templates/*.html"]  # Include HTML templates

# Pytest configuration for testing
[tool.pytest.ini_options]
testpaths = ["tests"]                    # Directory containing tests
python_files = ["test_*.py"]            # Test file naming pattern
python_classes = ["Test*"]              # Test class naming pattern
python_functions = ["test_*"]           # Test function naming pattern
addopts = "-v --tb=short --strict-markers"  # Default pytest options
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
]

# Ruff configuration for code formatting and linting
[tool.ruff]
target-version = "py312"     # Target Python version
line-length = 88             # Maximum line length (Black-compatible)

# Ruff linting rules
[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by line-length
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

# Ruff formatting options
[tool.ruff.format]
quote-style = "double"                    # Use double quotes
indent-style = "space"                    # Use spaces for indentation
skip-magic-trailing-comma = false         # Always add trailing commas
line-ending = "auto"                      # Automatic line ending detection

# MyPy configuration for static type checking
[tool.mypy]
python_version = "3.12"                   # Target Python version
warn_return_any = true                    # Warn about returning Any
warn_unused_configs = true                # Warn about unused config options
disallow_untyped_defs = true             # Require type annotations for functions
disallow_incomplete_defs = true          # Require complete type annotations
check_untyped_defs = true                # Check untyped function definitions
disallow_untyped_decorators = true       # Require typed decorators
no_implicit_optional = true              # No implicit Optional types
warn_redundant_casts = true              # Warn about redundant type casts
warn_unused_ignores = true               # Warn about unused type ignore comments
warn_no_return = true                    # Warn about functions that don't return
warn_unreachable = true                  # Warn about unreachable code
strict_equality = true                   # Strict equality checking
exclude = [
    "build",                             # Exclude build directory
    "venv",                              # Exclude virtual environments
    "__pycache__",                       # Exclude Python cache
    ".pytest_cache",                     # Exclude pytest cache
    "tests",                             # Exclude test files from type checking
]

# MyPy module overrides for external libraries
[[tool.mypy.overrides]]
module = [
    "playwright.*",  # Browser automation library
    "jinja2.*",      # Template engine
    "fake_useragent.*", # Fake User-Agent generator
]
ignore_missing_imports = true            # Ignore missing imports for these modules